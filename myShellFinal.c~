#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>
#include <fcntl.h>

char* cmdBuffer;
int p[2];

int childEXE(char *command);


/**
myShellFinal.c 
William Douglas

This file holds all the methods needed to build a simple unix shell
that will execute on a given terminal. the program launches with main()
however most of the functions are defined either in there own method 
or within the executor method, mainEXE(). 
**/


/**
Method is used to read the user input from the command line.
Void,
Returns char *ln, this represents one line from the command line.
**/
char *readCmdLine(){
  char *ln = "";
  char *endln="\n";
  ssize_t bufsize = 0;
  getline(&ln, &bufsize, stdin);
  ln[strcspn(ln,endln)]=0; // this just trims "\n" from the input because we dont need it.
  return ln;
}

/**
This Method is used to parse commands and command arguments from an input String.
Note we do not parse mulitpule commands here, we only use the deliminatior " ". This is because 
the ";" deliminator is taken care of later in Main where its easier to fork for execution.

char *input,  The input string to be parsed.
Returns char **cmd, This array holds the command name at  cmd[0] and its arguments in cmd[1 -> ..],  
**/
char **parseCmds(char *input) {
   char **cmd = malloc(64 * sizeof(char *));
   char *temp; int  i=0;

   temp = strtok(input, " ");       // this is used to split the inputline at each " " char.
   while (temp != NULL) {
      cmd[i] =temp;
      temp = strtok(NULL, " ");
      i++;
    }
    cmd[i] = NULL;
    return cmd;
}

/**
This method handles the cd command by just calling chdir() to do all the work for us.

char *arg, this is the normal path argument for cd and can even be ".."
return, we dont care about.  
 **/
int cd(char *arg) {if(arg !=NULL){ return chdir(arg);}}


/**
This is just a helper Method to split strings cleanly, use case is alot like String.split() in java.

char *input, the input string to be split up
char *delim, The char* we use to delim the string
Returns char **out, this is just an array of input split at each index of the delim
**/
char **strSplit(char *input,char *delim){
  char *ch;
  int idx=0;
  char **out=malloc(64 * sizeof(char *));
  ch = strtok(input,delim);
  while(ch !=NULL){
    out[idx]=ch;
    ch = strtok(NULL,delim);
    idx++;
	}
  return(out);
}


/**
readFile handles most of the file function we need for the program.

char *fileName, this is the name or path or the file we need
int print, this determines if the file contents will be printed(we only use for help cmd)  
Return out, this is and array of each line pulled from the file.
**/
char **readFile(char *fileName, int print)
{
    char fileIn[1000][1000];
    char c[1000];
    int idx =0;
    FILE *fptr;
    char temp[1000];
    char in[1000];
    char *input;

    char **out=malloc(64 * sizeof(char *));
    if ((fptr = fopen(fileName, "r")) == NULL)
    {
        printf("Error! cant find file!");
        exit(1);         
    }
    while (fgets(fileIn[idx],sizeof(c),fptr)!=NULL){  //this block is populates a char** with each line onfile//
      if(print==1){printf("%s",fileIn[idx]);} 
      out[idx]=fileIn[idx];
      idx++;
     }
    return out;
}

void writeFile(char *fileName, char *command){
  FILE *fptr;
  char **out=malloc(64 * sizeof(char *));


  int fw =open("out.txt", O_WRONLY| O_APPEND);

    dup2(fw,1);
    printf("wooh I Write");
    //dup2(1,1);
}

char* getHistory(char** command){
      if(strcmp(command[0], "!!") ==0){
	printf("build history funct.");
      }
}

void redirectOutput(char **args, int i,char *input){// for >
  printf("Input: %d  %s\n",i,input);
  char newInput[sizeof(input)];
  for(int a=0;a<i;a++){
  strcat(newInput,args[a]);
  strcat(newInput," ");
  }

  int term;
  term =dup(1);
  printf("Output Directed to File: %s\n",args[i+1]);
  FILE *fptr;
  char **out[1000];
  int fw = open(args[i+1], O_WRONLY| O_APPEND);
  dup2(fw,STDOUT_FILENO);
  childEXE(newInput);
  printf("\n");
  dup2(term,STDOUT_FILENO);
  close(term);
  close(fw);
}

void redirectInput(char **args, int i,char* input){// for <
  printf("Input: %d  %s\n",i,input);
  char newInput[sizeof(input)+100];
  for(int a=0;a<i;a++){
  strcat(newInput,args[a]);
  strcat(newInput," ");
  }
   strcat(newInput,args[i+1]);
   printf("Input: %s\n",newInput);

  int term;
  term =dup(1);
  int fw = open(args[i+1], O_RDONLY);
  dup2(fw,0);
  childEXE(newInput);
  printf("\n");
  dup2(term,STDOUT_FILENO);
  close(term);
  close(fw);
}


int childEXE(char *command){
  char **args;
  int tempIdx;
  char x [100];
  strcpy(x,command);

  
  args = parseCmds(command); // get args of a command
  if(args ==NULL){exit(1);}
  // Special commands = !!, cd, exit, help, <, >, environ, dir

  if(args[2] != NULL){
    for(int i=0;i<sizeof(args);i++){
      printf("args: %s",args[i]);
      if(strcmp(args[i], ">")==0){redirectOutput(args,i,x);break;}
      if(strcmp(args[i], "<")==0){redirectInput(args,i,x);break;}
    }
  }
  else if(strcmp(args[0], "!!") ==0){exit(0);}
  else if(strcmp(args[0], "cd") ==0){cd(args[1]);}
  else if(strcmp(args[0], "exit") ==0){exit(0);}
  else if(strcmp(args[0], "help") ==0){readFile("README",1);}
  else if(strcmp(args[0], "environ") ==0){exit(0);}
  else if(strcmp(args[0], "dir") ==0){exit(0);}

  else{
    execvp(args[0], args);
  }


  /*

  if (child == 0) {if (execvp(command[0], command) < 0) {    // we use execvp to run most of the commands //	   exit(1);
 }
       
      else {
	if(back==0){waitpid(child, &stat_loc, WUNTRACED);}     // here we add background funct //
      }  
  */
  

  


  
  return 1;

}



/**
mainEXE is the main execuiton method for the program, here inputs are parsed into commands, if the command needs
special actions they are defined then we fork and execute each command.

char *input, this is a semi-parsed string, we still need to parse its args before running them.
int  back,  we use this to triger the background run mode.
returns 0, we dont need to return data for this method.
**/
int mainEXE(char *input, int back,char *lastCmd){
  char **command;
  char **cmds;
  pid_t child;
  int stat_loc;
  char path[1000];
  int pipeId[2];
  char outMsg[1000];
  char inMsg[1000];

  cmds=strSplit(input,";");                  // this block takes the input,splits it with ';' as a delim //	
  for(int i=0;i<sizeof(cmds);i++){           // for each command we exexute eveything below //
    if(cmds[i]!=NULL){  
      command = parseCmds(cmds[i]);         // here we run parsCmds to find arg etc //
      if (!command[0]) {                    // if there is a blank input we free data and continue //
	free(input);
	free(command);
	continue;
      }





      // mmmm, Yeah you build that pipe // 
      pipe(pipeId);
      child = fork(); // make more childern 
      // outMsg=cmds[i];
      if(child>0){
	close(pipeId[0]);
	write(pipeId[1],cmds[i],strlen(cmds[i])+1);
	close(pipeId[1]);
      }	
      else {	
	read(pipeId[0],inMsg,1000);
	printf("readPipe: %s \n",inMsg);
	close(pipeId[0]);  
      }
      
      
      

      //Funct Defs.//
      if(child==0){
      if(strcmp(command[0], "!!") ==0){

	read(pipeId[0],inMsg,1000);
	printf("readPipe: %s \n",inMsg);
	close(pipeId[0]);
	cmds[i]= inMsg;
	continue;
      }
      }

      



      //not needed
      if(strcmp(command[0], "pwd") ==0){ continue;}                 // removes pwd from command line //
      


      if (strcmp(command[0], "cd") == 0) {                         // cd commands look at cd method //
	if(command[1]==NULL){command[0]="pwd";} 
	else if (cd(command[1]) < 0) {
	  continue;
	}
      }
      




      
      if(strcmp(command[0], "exit") ==0){printf("\n");exit(0);} // exit command just exits program via exit() //



      

      // help prints the README //
      if( child ==0){
      if(strcmp(command[0], "help") ==0){printf("\n");readFile("README",1);continue;}
      }


      
      if(child ==0){
      if(strcmp(command[0], "<") ==0){                // redirection of input to a file.
	printf("\n");
	char **lines=readFile(command[1],0);
	for(int i=0;i<sizeof(lines);i++){
	  
	  mainEXE(lines[i],back,cmdBuffer);
	}
	continue;
      }}

      

      
      /*
      if(sizeof(command)>1){
       if(child ==0){
      if(strcmp(command[1], ">") ==0){                // redirection of output to a file.
	printf("\n");
	//writeFile(command[2],"nah Bro");
	//mainEXE(command[0],back,cmdBuffer);
	
	}
	continue;
	}}
      */
      
      

      
      if (strcmp(command[0], "environ") == 0) {           // environ command just uses printenv call//
	if(command[1]==NULL){command[0]="printenv";}        
	else if (cd(command[1]) < 0) {
	  continue;
	}
      }}
      
      


    
      if (strcmp(command[0], "dir") == 0) {              // dir command //
	if(command[1]==NULL){command[0]="pwd";}          // need to do our own exe on this one //
	else{                                           // first we cd into path provided, then ls ,then cd ..//
	  cd(command[1]);
	  child = fork();
	  command[0] = "ls";
	  command[1] = NULL;
	  if (child < 0) {
	    exit(1);
	  }
	  if (child== 0) {
	    
	    if (execvp(command[0], command) < 0) {
                exit(1);
	    }
	  } 
	  else {
	    if(back==0){waitpid(child, &stat_loc, WUNTRACED);}
	  }
	  chdir("..");
	}  
	  continue;                                 // since we already executed we can skip the rest //
      }
      

      

      // running the commands now //
      if (child < 0) {
	exit(1);
      }
      
      if (child == 0) {
	if (execvp(command[0], command) < 0) {    // we use execvp to run most of the commands //
	  exit(1);
	}
      } 
      else {
	if(back==0){waitpid(child, &stat_loc, WUNTRACED);}     // here we add background funct //
      }
    }
  
}


/**
   This is the main function, it directs all action on the program.
   I decided to change the main loop provided to make it look better and
   To be more functional 
   A basic manifest:
   1.) Get input
   2.) fork()
   3.) child exe command
   4.) return to parent hold or kill the loop depending.

   return, no return info.
 **/

/*
int main() {
  printf("starting myShell...\n \n");
  readFile("intro.txt",1);
  char *input;
  char path[1000];
  int back=0;

  int live=1;

  //if(pipe(p)>1){exit(1);} // make pipe

  pipe(p);

  while (live) {
    getcwd(path,sizeof(path));    // this gets our path
    printf("\n%s>",path);
    input = readCmdLine();

    if(input[strlen(input)-1]=='&'){   // this block changes the run mode if '&' is found. 1 = background 0=norm.
      back =1;
      input[strlen(input)-1]=' ';
    }


    if(strcmp(input, "exit")==0){ printf("\n Thank you for using the Magic Conch Shell Shell! \n");break;}
    mainEXE(input,back,cmdBuffer);
  }

  return 0;
}
*/
int main() {
  printf("starting myShell...\n \n");
  readFile("intro.txt",1);
  char *input;
  char path[1000];
  int back=0;
  int live=1;
  char **command;
  char **commands;
  pid_t child;
  int stat_loc;
  char **pipes;



  //pipe(p);

  while (live) {
    getcwd(path,sizeof(path));    // this gets our path
    printf("\n%s>",path);
    input = readCmdLine();

    if(input[strlen(input)-1]=='&'){   // this block changes the run mode if '&' is found. 1 = background 0=norm.
      back =1;
      input[strlen(input)-1]=' ';
    }
    if(strcmp(input, "exit")==0){ printf("\n Thank you for using the Magic Conch Shell Shell! \n");break;}
    





  pipes=strSplit(input,"|"); 


  char newInputA[200];
  strcat(newInputA,pipes[0]);
  strcat(newInputA," > pipe.txt");

  char newInputB[200];
  strcat(newInputB,pipes[1]);
  strcat(newInputB," < pipe.txt");

  //printf("A: %s\n",newInputA);
  //printf("B: %s\n",newInputB);
  /*
  if(sizeof(pipes==0)){

  printf("input: %s \n",input);
  commands=strSplit(input,";");                  // this block takes the input,splits it with ';' as a delim //	
  for(int i=0;i<sizeof(commands);i++){           // for each command we exexute eveything below //
    if(commands[i]!=NULL){       
      child = fork();
      if(child==0){childEXE(commands[i]);}
      else{waitpid(0, &stat_loc, WUNTRACED);}
   
    }
    }
    }else{
    */
      // would make something not hard coded but pipes[] can only be size 2.
  //strcat(pipes[0]," > pipe.txt");
	//strcat(pipes[1],"< pipe.txt");


      for(int i=0;i<sizeof(pipes);i++){
     
      if(pipes[i]!=NULL){       
      child = fork();
      if(child==0){
	if(i==0){childEXE(newInputA);}
	else{childEXE(newInputB);}
      }
      else{waitpid(0, &stat_loc, WUNTRACED);}
      }
      }
      //}
      


  }
  return 0;
  
  
}
